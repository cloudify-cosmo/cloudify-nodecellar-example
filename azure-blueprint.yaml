tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs the nodecellar application on a
  new, scalable Azure instance. There is a load-balancer
  that connects to all of the instances to display the
  webpage. 

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - https://raw.githubusercontent.com/01000101/cloudify-azure-plugin/scaling/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.4/plugin.yaml
  - types/nodecellar.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################

inputs:
  resource_prefix:
    default: nc
  resource_suffix:
    default: 11

  # Azure account information
  subscription_id:
    type: string
    required: true
  tenant_id:
    type: string
    required: true
  client_id:
    type: string
    required: true
  client_secret:
    type: string
    required: true
  location:
    type: string
    required: true
    default: eastus
  retry_after:
    type: integer
    default: 60

  # Existing manager resources
  # This is necessary to use Cloudify agents
  mgr_resource_group_name:
    type: string
    required: true
  mgr_storage_account_name:
    type: string
    required: true
  mgr_virtual_network_name:
    type: string
    required: true
  mgr_subnet_name:
    type: string
    required: true

  # Virtual Machine information
  vm_size:
    type: string
    required: true
    default: Standard_A2
  vm_os_family:
    type: string
    required: true
    default: linux
  vm_image_publisher:
    type: string
    required: true
    default: Canonical
  vm_image_offer:
    type: string
    required: true
    default: UbuntuServer
  vm_image_sku:
    type: string
    required: true
    default: 14.04.4-LTS
  vm_image_version:
    type: string
    required: true
    default: 14.04.201604060

  # Access information
  vm_os_username:
    description: >
      Username to create as the VM's administrator user
    type: string
    required: true
    default: cloudify
  vm_os_password:
    description: >
      Password to use for the VM's administrator user
    type: string
    required: true
    default: Cl0ud1fy!
  vm_os_pubkeys:
    description: the public key
    required: true
  vm_os_pubkey_auth_only:
    default: true

  # Application information
  webserver_port:
    description: The internal Microsoft IIS web server port
    default: 8080
  loadbalancer_port:
    description: The external Azure Load Balancer port
    default: 80


dsl_definitions:
  azure_configuration: &azure_configuration
    subscription_id: { get_input: subscription_id }
    tenant_id: { get_input: tenant_id }
    client_id: { get_input: client_id }
    client_secret: { get_input: client_secret }


node_types:

################################################################
# Blueprint node types.
#
# specific new types for the nodecellar app.
# these types are mapped to scripts that are resposible
# for the lifecycle operation.
################################################################

  nodecellar.nodes.MonitoredServer:
    derived_from: cloudify.azure.nodes.compute.VirtualMachine
    properties:
      location:
        default: { get_input: location }
      retry_after:
        default: { get_input: retry_after }
      os_family:
        default: { get_input: vm_os_family }
      azure_config:
        default: *azure_configuration
      resource_config:
        default:
          hardwareProfile:
            vmSize: { get_input: vm_size }
          storageProfile:
            imageReference:
              publisher: { get_input: vm_image_publisher }
              offer: { get_input: vm_image_offer }
              sku: { get_input: vm_image_sku }
              version: { get_input: vm_image_version }
          osProfile:
            adminUsername: { get_input: vm_os_username }
            adminPassword: { get_input: vm_os_password }
            linuxConfiguration:
              ssh:
                publicKeys: { get_input: vm_os_pubkeys }
              disablePasswordAuthentication: { get_input: vm_os_pubkey_auth_only }
      agent_config:
        default:
          user: { get_input: vm_os_username }
          password: { get_input: vm_os_password }
          install_method: remote
    interfaces:

      ###########################################################
      # We are infact telling cloudify to install a diamond
      # monitoring agent on the server.
      #
      # (see https://github.com/BrightcoveOS/Diamond)
      ###########################################################

      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall

      ###########################################################
      # Adding some collectors. These collectors are necessary
      # for the Cloudify UI to display the deafult metrics.
      ###########################################################

      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

  ###########################################################
  # Mongo Database.
  #
  # Used the data backend for the nodecellar application.
  # configurable properties:
  #   - port
  ###########################################################

node_templates:
  ##########################
  # Nodecellar application #
  ##########################
  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    properties:
      port: { get_input: webserver_port }
    relationships:
      - type: node_connected_to_mongo
        target: vm_be_app_mongodb
      - type: node_contained_in_nodejs
        target: vm_fe_app_nodejs
        

  ######################
  # Front-end software #
  ######################
  vm_fe_app_nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm_fe
        
        
  #####################
  # Back-end software #
  #####################
  vm_be_app_mongodb:
    type: nodecellar.nodes.MonitoredMongoDatabase
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm_be


  ##################
  # Resource group #
  ##################
  resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      name: {concat:[{get_input: resource_prefix},rg,{get_input: resource_suffix}]}
      location: { get_input: location }
      azure_config: *azure_configuration


  ##############################
  # Existing manager resources #
  ##############################
  manager_storage_account:
    type: cloudify.azure.nodes.storage.StorageAccount
    properties:
      resource_group_name: { get_input: mgr_resource_group_name }
      name: { get_input: mgr_storage_account_name }
      use_external_resource: true
      location: { get_input: location }
  
  manager_virtual_network:
    type: cloudify.azure.nodes.network.VirtualNetwork
    properties:
      resource_group_name: { get_input: mgr_resource_group_name }
      name: { get_input: mgr_virtual_network_name }
      use_external_resource: true
      location: { get_input: location }
      
  manager_subnet:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      resource_group_name: { get_input: mgr_resource_group_name }
      name: { get_input: mgr_subnet_name }
      use_external_resource: true
      location: { get_input: location }
    relationships:
    - type: cloudify.azure.relationships.contained_in_virtual_network
      target: manager_virtual_network


  ########################
  # Front-end VM compute #
  ########################
  vm_fe:
    type: nodecellar.nodes.MonitoredServer
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_storage_account
      target: manager_storage_account
    - type: cloudify.azure.relationships.connected_to_availability_set
      target: vm_fe_availability_set
    - type: cloudify.azure.relationships.connected_to_nic
      target: vm_fe_nic
      
  vm_fe_availability_set:
    type: cloudify.azure.nodes.compute.AvailabilitySet
    properties:
      location: { get_input: location }
      azure_config: *azure_configuration
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
      
  
  #######################
  # Back-end VM compute #
  #######################
  vm_be:
    type: nodecellar.nodes.MonitoredServer
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_storage_account
      target: manager_storage_account
    - type: cloudify.azure.relationships.connected_to_nic
      target: vm_be_nic
      

  ###########################
  # Front-end VM networking #
  ########################### 
  vm_fe_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: *azure_configuration
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.nic_connected_to_network_security_group
      target: vm_fe_network_security_group
    - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
      target: vm_fe_nic_ip_cfg
    - type: cloudify.azure.relationships.nic_connected_to_lb_be_pool
      target: load_balancer_backend_pool
     
  vm_fe_public_ip:
    type: cloudify.azure.nodes.network.PublicIPAddress
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        publicIPAllocationMethod: Static
      azure_config: *azure_configuration
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
     
  vm_fe_nic_ip_cfg:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
      azure_config: *azure_configuration
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: manager_subnet
    - type: cloudify.azure.relationships.ip_configuration_connected_to_public_ip
      target: vm_fe_public_ip
      
  vm_fe_network_security_group:
    type: cloudify.azure.nodes.network.NetworkSecurityGroup
    properties:
      location: { get_input: location }
      azure_config: *azure_configuration
      retry_after: { get_input: retry_after }
      resource_config:
        securityRules:
        - name: AllowSSH
          properties:
            description: SSH access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 22
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 102
            access: Allow
            direction: Inbound
        - name: AllowHTTP
          properties:
            description: HTTP access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: { get_property: [ nodecellar, port ] }
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 103
            access: Allow
            direction: Inbound
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group


  ##########################
  # Back-end VM networking #
  ##########################
  vm_be_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: *azure_configuration
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.nic_connected_to_network_security_group
      target: vm_be_network_security_group
    - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
      target: vm_be_nic_ip_cfg
     
  vm_be_nic_ip_cfg:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
      azure_config: *azure_configuration
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: manager_subnet
      
  vm_be_network_security_group:
    type: cloudify.azure.nodes.network.NetworkSecurityGroup
    properties:
      location: { get_input: location }
      azure_config: *azure_configuration
      retry_after: { get_input: retry_after }
      resource_config:
        securityRules:
        - name: AllowSSH
          properties:
            description: SSH access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 22
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 102
            access: Allow
            direction: Inbound
        - name: AllowMongo
          properties:
            description: Mongo access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: { get_property: [ vm_be_app_mongodb, port ] }
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 104
            access: Allow
            direction: Inbound
        - name: AllowMongoAPI
          properties:
            description: Mongo API access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 28017
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 105
            access: Allow
            direction: Inbound
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group


  #######################
  # Load Balancer nodes #
  #######################
  lb_public_ip:
    type: cloudify.azure.nodes.network.PublicIPAddress
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        publicIPAllocationMethod: Static
      azure_config: *azure_configuration
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
      
  load_balancer:
    type: cloudify.azure.nodes.network.LoadBalancer
    properties:
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: *azure_configuration
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_ip_configuration
      target: lb_ip_cfg
      
  lb_ip_cfg:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      name: lbfeip
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
      azure_config: *azure_configuration
    relationships:
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: manager_subnet
    - type: cloudify.azure.relationships.ip_configuration_connected_to_public_ip
      target: lb_public_ip
      
  load_balancer_backend_pool:
    type: cloudify.azure.nodes.network.LoadBalancer.BackendAddressPool
    properties:
      name: lbbepool
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      azure_config: *azure_configuration
    relationships:
    - type: cloudify.azure.relationships.contained_in_load_balancer
      target: load_balancer
      
  load_balancer_probe:
    type: cloudify.azure.nodes.network.LoadBalancer.Probe
    properties:
      name: lbprobe
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        protocol: Http
        port: { get_input: webserver_port }
        requestPath: index.html
      azure_config: *azure_configuration
    relationships:
    - type: cloudify.azure.relationships.contained_in_load_balancer
      target: load_balancer
    # Ensure serial operations
    - type: cloudify.relationships.depends_on
      target: load_balancer_backend_pool
      
  load_balancer_rule:
    type: cloudify.azure.nodes.network.LoadBalancer.Rule
    properties:
      name: lbrule
      location: { get_input: location }
      retry_after: { get_input: retry_after }
      resource_config:
        protocol: Tcp
        backendPort: { get_input: webserver_port }
        frontendPort: { get_input: loadbalancer_port }
      azure_config: *azure_configuration
    relationships:
    - type: cloudify.azure.relationships.contained_in_load_balancer
      target: load_balancer
    - type: cloudify.azure.relationships.connected_to_ip_configuration
      target: lb_ip_cfg
    - type: cloudify.azure.relationships.connected_to_lb_be_pool
      target: load_balancer_backend_pool
    - type: cloudify.azure.relationships.connected_to_lb_probe
      target: load_balancer_probe





##########################
# Front-end scale policy #
##########################
groups:
  fe_scale_group:
    members: [vm_fe, vm_fe_nic, vm_fe_public_ip, vm_fe_nic_ip_cfg, vm_fe_app_nodejs, nodecellar]
    
policies:
  fe_scale_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [fe_scale_group]

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
  nodecellar_ip:
    value: { get_attribute: [ load_balancer, public_ip ] }
  nodecellar_port:
    value: { get_input: loadbalancer_port }
  nodecellar_endpoint:
    value: { concat: [ 'http://', { get_attribute: [ load_balancer, public_ip ] }, ':',  { get_input: loadbalancer_port } ] }
  mongodb_private_ip:
    value: { get_attribute: [ vm_be, ip ] }
