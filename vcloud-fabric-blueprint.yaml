tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/tosca-vcloud-plugin/master/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.2/plugin.yaml
  - types/agentless-nodecellar.yaml

inputs:

  catalog:
    type: string

  template:
    type: string

  server_cpu:
    default: 2
    description: >
      cpu count for each server

  server_memory:
    default: 4096
    description: >
      memory amount for each server

  user_public_key:
    type: string

  user:
    description: >
      User for connecting to agent VM's
    type: string
    default: ubuntu

  edge_gateway:
    type: string
    default: gateway
    description: >
      For 'ondemand' service type, the value of edge_gateway
      is always 'gateway'

node_types:

  # base server type for installation without agent
  agentless-nodecellar.nodes.ParentTypeServer:
    derived_from: cloudify.vcloud.nodes.Server
    properties:
      install_agent:
        default: false
      cloudify_agent:
        default:
          user: ubuntu
          home_dir: /home/ubuntu

node_templates:

  nodejs_nat:
    type: cloudify.vcloud.nodes.PublicNAT
    properties:
      nat:
        edge_gateway: { get_input: edge_gateway }
      rules:
       - type: DNAT
         protocol: tcp
         original_port: 8080
         translated_port: 8080
       - type: DNAT
         protocol: tcp
         original_port: 22
         translated_port: 22

  nodejs_host:
    type: agentless-nodecellar.nodes.ParentTypeServer
    relationships:
      - target: nodejs_nat
        type: cloudify.vcloud.server_connected_to_public_nat
    properties:
      server:
        catalog: { get_input: catalog }
        template: { get_input: template }
        hardware:
          cpu: { get_input: server_cpu }
          memory: { get_input: server_memory }
        guest_customization:
          public_keys:
            -
             key:  { get_input: user_public_key }
             user: { get_input: user }

  mongod_host:
    type: agentless-nodecellar.nodes.ParentTypeServer
    properties:
      server:
        catalog: { get_input: catalog }
        template: { get_input: template }
        hardware:
          cpu: { get_input: server_cpu }
          memory: { get_input: server_memory }
        guest_customization:
          public_keys:
            -
             key:  { get_input: user_public_key }
             user: { get_input: user }

  nodejs:
    type: agentless-nodecellar.nodes.NodeJSServer
    relationships:
        - target: nodejs_host
          type: cloudify.relationships.contained_in

  mongod:
    type: agentless-nodecellar.nodes.MongoDatabase
    relationships:
        - target: mongod_host
          type: cloudify.relationships.contained_in

  nodecellar:
    type: agentless-nodecellar.nodes.nodecellar
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            task_properties:
              config:
                mongo: { get_attribute: [mongod_host, ip] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: mongod
      - type: cloudify.relationships.contained_in
        target: nodejs

outputs:
  endpoint:
    description: Web application endpoint
    value:
      public_ip: { get_attribute: [ nodejs_nat, public_ip ] }
