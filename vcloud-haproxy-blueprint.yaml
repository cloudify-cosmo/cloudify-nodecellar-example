###########################################################
# This Blueprint installs the nodecellar application behind
# an haproxy instance on an vcloud cloud environment.
###########################################################

tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2/types.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.2/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/tosca-vcloud-plugin/master/plugin.yaml
  - types/nodecellar.yaml
  - types/haproxy.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.yaml
#####################################################################################

inputs:

  catalog:
    description: >
      The vCloud catalog
    default: ''

  template:
    description: >
      The vCloud template
    default: ''

  agent_user:
    description: >
      User name used when SSH-ing into the started machine
    default: ubuntu

  management_network_name:
    description: >
      Name of the existing network that's being used for Cloudify management
    type: string

  application_network_name:
    description: >
      Name for the new network that will be used as application network
    type: string
    default: nodecellar-network

  ip_allocation_mode:
    type: string
    default: pool

  edge_gateway:
    description: >
      The edge gateway ID
    type: string

  server_cpu:
    default: 2
    description: >
      cpu count for each server

  server_memory:
    default: 4096
    description: >
      memory amount for each server
 
  agent_public_key:
    type: string


node_types:

  nodecellar.nodes.AppNetwork:
    derived_from: cloudify.vcloud.nodes.Network
    properties:
      network:
        default:
          edge_gateway: { get_input: edge_gateway }
          name: { get_input: application_network_name }
          static_range: 10.0.0.2-10.0.0.128
          netmask: 255.255.255.0
          gateway_ip: 10.0.0.1
          dns: ['10.0.0.1', '8.8.8.8']
          dhcp:
            dhcp_range: 10.0.0.129-10.0.0.254
            default_lease: 3600
            max_lease: 7200

  nodecellar.nodes.MonitoredServer:
    derived_from: cloudify.vcloud.nodes.Server
    properties:
      cloudify_agent:
        default:
          user: { get_input: agent_user }
          home_dir: /home/ubuntu
      server:
        default:
          catalog: { get_input: catalog }
          template: { get_input: template }
          hardware:
            cpu: { get_input: server_cpu }
            memory: { get_input: server_memory }
          guest_customization:
            public_keys:
              -
               key:  { get_input: agent_public_key }
               user: { get_input: agent_user }
      management_network:
        default: { get_input: management_network_name }
    interfaces:

      ###########################################################
      # We are infact telling cloudify to install a diamond
      # monitoring agent on the server.
      #
      # (see https://github.com/BrightcoveOS/Diamond)
      ###########################################################

      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall

      ###########################################################
      # Adding some collectors. These collectors are necessary
      # for the Cloudify UI to display the default metrics.
      ###########################################################

      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
              default:
                CPUCollector: {}
                MemoryCollector: {}
                LoadAverageCollector: {}
                DiskUsageCollector:
                  config:
                    devices: x?vd[a-z]+[0-9]*$
                NetworkCollector: {}


node_templates:

  management_network:
    type: cloudify.vcloud.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: management_network_name }

  management_network_port:
    type: cloudify.vcloud.nodes.Port
    properties:
      port:
        network: { get_input: management_network_name }
        ip_allocation_mode: { get_input: ip_allocation_mode }
        primary_interface: false

  app_network:
    type: nodecellar.nodes.AppNetwork
    relationships:
      ###########################################################
      # Bring internet access for application network
      ###########################################################
      - target: app_network_internet_access
        type: cloudify.vcloud.net_connected_to_public_nat

  app_network_port:
    type: cloudify.vcloud.nodes.Port
    properties:
      port:
        network: { get_input: application_network_name }
        ip_allocation_mode: { get_input: ip_allocation_mode }
        primary_interface: true
    relationships:
      ###########################################################
      # Connect port to network so network will be created first
      ###########################################################
      - target: app_network
        type: cloudify.vcloud.port_connected_to_network

  app_network_internet_access:
    type: cloudify.vcloud.nodes.PublicNAT
    properties:
      nat:
        edge_gateway: { get_input: edge_gateway }
      rules:
        type:
          - SNAT

  mongod_host:
    type: nodecellar.nodes.MonitoredServer
    relationships:

      ###########################################################
      # Connecting network interfaces to the mongo host
      ###########################################################

      - target: app_network_port
        type: cloudify.vcloud.server_connected_to_port
      - target: management_network_port
        type: cloudify.vcloud.server_connected_to_port

  nodejs_host:
    type: nodecellar.nodes.MonitoredServer

    ###########################################################
    # Setting the nodejs_host initial number of instances to 2.
    # The default values for instances.deploy is 1.
    ###########################################################

    instances:
      deploy: 2
    relationships:

      ###########################################################
      # Connecting network interfaces to the nodecellar host
      ###########################################################

      - target: app_network_port
        type: cloudify.vcloud.server_connected_to_port
      - target: management_network_port
        type: cloudify.vcloud.server_connected_to_port

  haproxy_frontend_host:
    type: nodecellar.nodes.MonitoredServer
    relationships:

      ###########################################################
      # Attaching a floating ip to the haproxy frontend host
      ###########################################################

      - type: cloudify.vcloud.server_connected_to_floating_ip
        target: frontend_floatingip

      ###########################################################
      # Connecting network interfaces to the haproxy frontend host
      ###########################################################

      - target: app_network_port
        type: cloudify.vcloud.server_connected_to_port
      - target: management_network_port
        type: cloudify.vcloud.server_connected_to_port

  mongod:
    type: nodecellar.nodes.MongoDatabase
    properties:
      port: 27017
    interfaces:
      cloudify.interfaces.lifecycle:

        ###########################################################
        # The MongoDBCollector depends on a python library called
        # pymongo. We install this library in the 'configure'
        # lifecycle hook of this node.
        ###########################################################

        configure: scripts/mongo/install-pymongo.sh

      ###########################################################
      # Notice that this node defines an additional collector
      # to collect data on the MongoDB.
      ###########################################################

      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                MongoDBCollector:
                  config:
                    hosts: localhost:27017
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    properties:
      port: 8080
    relationships:

      ################################
      # Setting the mongo connection
      ################################

      - type: node_connected_to_mongo
        target: mongod

      ################################
      # Setting the nodejs connection
      ################################

      - type: node_contained_in_nodejs
        target: nodejs

      ################################
      # Setting the haproxy connection
      ################################

      - type: app_connected_to_haproxy
        target: haproxy


  ########################################
  # Note: only ubuntu haproxy installation
  # is supported.
  ########################################

  haproxy:
    type: haproxy.nodes.Proxy
    properties:

      ###########################################################
      # This is the port that will be used by haproxy.
      ###########################################################
      frontend_port: 80

      ###########################################################
      # This is the port that will be used by haproxy to display
      # statistics.
      ###########################################################
      statistics_port: 9000

      backend_app_port: { get_property: [ nodecellar, port ] }

    interfaces:
      ###########################################################
      # Notice that this node defines an additional collector
      # to collect data on the haproxy instance.
      # Also notice that in the URL, port 9000 is used. If you
      # choose to change this port on the haproxy node template,
      # this URL should be updated as well.
      ###########################################################

      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                HAProxyCollector:
                  config:
                    url: http://127.0.0.1:9000/haproxy_stats;csv
    relationships:
      - target: haproxy_frontend_host
        type: cloudify.relationships.contained_in


  ###########################################################
  # A floating ip to be attached to the haproxy frontend host,
  # since eventually we want to be able to access the application
  # from any machine, on any network.
  ###########################################################

  frontend_floatingip:
    type: cloudify.vcloud.nodes.FloatingIP
    properties:
      floatingip:
        edge_gateway: { get_input: edge_gateway }

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ frontend_floatingip, public_ip ] }
      port: { get_property: [haproxy, frontend_port] }
