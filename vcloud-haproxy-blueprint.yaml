###########################################################
# This Blueprint installs the nodecellar application
# on an vcloud environment.
###########################################################

tosca_definitions_version: cloudify_dsl_1_1

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3m3/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/tosca-vcloud-plugin/master/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3m3/plugin.yaml
  - types/nodecellar.yaml
  - types/vcloud-types.yaml
  - types/haproxy/haproxy.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################

inputs:

  template:
    type: string

  agent_user:
    description: >
      User for connecting to agent VM's
    type: string
    default: ubuntu

  agent_public_key:
    type: string

  catalog:
    type: string

  server_cpu:
    default: 2
    description: >
      cpu count for each server

  server_memory:
    default: 4096
    description: >
      memory amount for each server

  edge_gateway:
    type: string
    default: gateway
    description: >
      For 'ondemand' service type, the value of edge_gateway
      is always 'gateway'

node_templates:

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    relationships:

      ################################
      # Setting the mongo connection
      ################################

      - type: node_connected_to_mongo
        target: mongod

      ################################
      # Setting the nodejs connection
      ################################

      - type: node_contained_in_nodejs
        target: nodejs

      ################################
      # Setting the haproxy connection
      ################################

      - type: app_connected_to_haproxy
        target: haproxy

  mongod:
    type: nodecellar.nodes.MonitoredMongoDatabase
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  haproxy:
    type: nodecellar.nodes.MonitoredHAProxy
    properties:
      backend_app_port: { get_property: [ nodecellar, port ] }
    relationships:
      - target: haproxy_frontend_host
        type: cloudify.relationships.contained_in

  mongod_host:
    type: nodecellar.nodes.MonitoredServer

  nodejs_host:
    type: nodecellar.nodes.MonitoredServer

    ###########################################################
    # Setting the nodejs_host initial number of instances to 2.
    # The default values for instances.deploy is 1.
    ###########################################################

    instances:
      deploy: 2

  haproxy_frontend_host:
    type: nodecellar.nodes.MonitoredServer
    relationships:

      ###########################################################
      # Attaching a ip to the haproxy host
      ###########################################################

      - target: nodecellar_floatingip
        type: cloudify.vcloud.server_connected_to_floating_ip

  ###########################################################
  # An ip to be attached to the haproxy frontend host, since
  # eventually we want to be able to access it
  # from any machine, on any network.
  ###########################################################

  nodecellar_floatingip:
    type: cloudify.vcloud.nodes.FloatingIP
    properties:
      floatingip:
        edge_gateway: { get_input: edge_gateway }

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ nodecellar_floatingip, floating_ip_address ] }
      public_ip: { get_attribute: [ nodecellar_floatingip, public_ip ] }
      port: { get_property: [ nodecellar, port ] }
